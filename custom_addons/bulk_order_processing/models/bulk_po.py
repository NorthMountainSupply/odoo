from odoo import api, fields, models


class BulkPO(models.Model):
    _name = "bulk.po.line"
    _description = "Bulk Purchase Order"

    # 6 Fields Automatically Added to the bulk.po Model by Odoo (all readonly):
    # create_date (datetime)
    # create_uid (many2one)
    # display_name (char)
    # id (integer)
    # write_date (datetime)
    # write_uid (many2one)

    name = fields.Char(string="Label", required=True)

    # Is this a current PO (from this week), or has it been dealt with?
    active = fields.Boolean(default=True)

    # ASIN corresponding to the product in this PO
    asin = fields.Char(string="ASIN", required=True, stored=True, copied=True)

    # Has this PO been canceled?
    canceled = fields.Boolean(default=False, stored=True)

    # Is this PO good to go for early print?
    early_print = fields.Boolean(default=False, stored=True)

    # The "Expected Date" of the PO on AVC
    expected_date = fields.Date(string="Expected Date", stored=True)

    # The "Expected Quantity" of the PO on AVC
    expected_qty = fields.Integer(string="Expected Quantity", stored=True)

    # The amount this product left after fulfilling all POs
    leftover_qty = fields.Float(string="Leftover Quantity", stored=True)

    # The date the PO was ordered
    order_date = fields.Date(string="Order Date", stored=True)

    # Quantity Requested by Amazon
    qty_requested = fields.Float(string="Quantity Requested", stored=True)

    # Has a quote been generated by this PO yet?
    quote_generated = fields.Boolean(default=False, stored=True)

    # Amazon warehouse this order is being shipped to
    ship_to_location = fields.Char(string="Ship To Location", stored=True)

    # Should an alert be displayed on the screen when viewing this PO?
    show_alert = fields.Boolean(default=False, stored=True)

    # Currency field
    currency_id = fields.Many2one("res.currency", string="Currency", default=lambda self: self.env.ref("base.USD").id)

    # Unit cost of the product in this PO
    unit_cost = fields.Monetary(string="Unit Cost", stored=True)

    # The cost of the entire PO line
    total_cost = fields.Monetary(string="Total Cost", stored=True, readonly=True, compute="_compute_total_cost")

    @api.depends("unit_cost", "expected_qty")
    def _compute_total_cost(self) -> None:
        for record in self:
            record["total_cost"] = record["unit_cost"] * record["expected_qty"]

    # The end of the shipping window
    window_end = fields.Date(string="Window End", stored=True)

    # The start of the shipping window
    window_start = fields.Date(string="Window Start", stored=True)

    # They type of shipping window
    window_type = fields.Char(string="Window Type", stored=True)

    # 8 character ID relating to the purchase order
    po_number = fields.Char(string="PO", required=True, stored=True)

    # The product associated with this PO, calculated from the ASIN
    product_tmpl_id: fields.Many2one = fields.Many2one("product.template", string="Product", compute="_compute_product_tmpl_id", store=True)

    @api.depends("asin")
    def _compute_product_tmpl_id(self) -> None:
        for record in self:
            if record["asin"]:
                products = self.env["product.template"].search([("asin", "=", record["asin"])])
                if products:
                    self._process_products(record, products)
                else:
                    self._set_no_product(record)
            else:
                self._set_no_product(record)

    def _process_products(self, record, products) -> None:
        product_with_b: list = list(filter(lambda p: "{B}" in p["name"], products))
        if product_with_b:
            record["product_tmpl_id"] = product_with_b[0]
            record["show_alert"] = False
        else:
            self._duplicate_product(record, products[0])

    def _duplicate_product(self, record, df_product) -> None:
        if df_product and df_product["name"]:
            b_product = df_product.copy({"name": df_product["name"].replace("{DF}", "{B}")})
            record["product_tmpl_id"] = b_product
            record["show_alert"] = True
            self._copy_boms(df_product, b_product)

    def _copy_boms(self, df_product, b_product) -> None:
        boms = self.env["mrp.bom"].search([("product_tmpl_id", "=", df_product["id"])])
        for bom in boms:
            bom.copy({"product_tmpl_id": b_product["id"]})

    def _set_no_product(self, record: models.Model) -> None:
        record["product_tmpl_id"] = None
        record["show_alert"] = False

    # NMS's internal reference for the associated product
    product_tmpl_default_code = fields.Char(
        string="Internal Reference",
        related="product_tmpl_id.default_code",
    )

    # Some stuff Amazon keeps track of, shouldn't be too important / modified after importing
    amazon_external_id = fields.Char(string="Amazon External ID", stored=True)
    catalog_number = fields.Char(string="Catalog Number", stored=True)
    merchant_sku = fields.Char(string="Merchant SKU", stored=True)
    model_number = fields.Char(string="Model Number", stored=True)
    product_title = fields.Char(string="Title", stored=True)
    vendor_code = fields.Char(string="Vendor Code", stored=True)
